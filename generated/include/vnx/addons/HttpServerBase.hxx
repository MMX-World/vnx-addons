
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_addons_HttpServerBase_HXX_
#define INCLUDE_vnx_addons_HttpServerBase_HXX_

#include <vnx/addons/package.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>
#include <vnx/addons/HttpRequest.hxx>
#include <vnx/addons/HttpResponse.hxx>


namespace vnx {
namespace addons {

class HttpServerBase : public ::vnx::Module {
public:
	
	::vnx::TopicPtr output_request;
	::vnx::TopicPtr output_response;
	int32_t port = 8080;
	vnx::bool_t use_epoll = false;
	vnx::bool_t non_blocking = true;
	vnx::bool_t show_info = false;
	vnx::bool_t show_warnings = false;
	vnx::bool_t error_payload = true;
	vnx::bool_t auto_session = false;
	int32_t session_size = 3;
	int64_t session_timeout = 86400;
	int64_t max_payload_size = 16777216;
	uint64_t chunk_size = 1048576;
	std::map<std::string, std::string> components;
	std::string access_control_allow_origin = "*";
	std::string content_security_policy = "";
	std::string cookie_policy = "SameSite=Strict;";
	std::string session_coookie_name = "hsid";
	std::string default_access = "VIEWER";
	std::string login_path = "/login";
	std::string logout_path = "/logout";
	std::string session_path = "/session";
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	HttpServerBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const HttpServerBase& _value);
	friend std::istream& operator>>(std::istream& _in, HttpServerBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	virtual void http_request_async(std::shared_ptr<const ::vnx::addons::HttpRequest> request, const std::string& sub_path, const vnx::request_id_t& _request_id) const = 0;
	void http_request_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::vnx::addons::HttpResponse>& _ret_0) const;
	virtual void http_request_chunk_async(std::shared_ptr<const ::vnx::addons::HttpRequest> request, const std::string& sub_path, const int64_t& offset, const int64_t& max_bytes, const vnx::request_id_t& _request_id) const = 0;
	void http_request_chunk_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::vnx::addons::HttpResponse>& _ret_0) const;
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Sample> _sample) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};


} // namespace vnx
} // namespace addons

#endif // INCLUDE_vnx_addons_HttpServerBase_HXX_
