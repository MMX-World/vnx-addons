
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_addons_HttpComponent_http_request_chunk_HXX_
#define INCLUDE_vnx_addons_HttpComponent_http_request_chunk_HXX_

#include <vnx/addons/package.hxx>
#include <vnx/Value.h>
#include <vnx/addons/HttpRequest.hxx>


namespace vnx {
namespace addons {

class VNX_ADDONS_EXPORT HttpComponent_http_request_chunk : public ::vnx::Value {
public:
	
	std::shared_ptr<const ::vnx::addons::HttpRequest> request;
	std::string sub_path;
	int64_t offset = 0;
	int64_t max_bytes = 0;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x97e79d08440406d5ull;
	
	HttpComponent_http_request_chunk() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	static std::shared_ptr<HttpComponent_http_request_chunk> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const HttpComponent_http_request_chunk& _value);
	friend std::istream& operator>>(std::istream& _in, HttpComponent_http_request_chunk& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};

template<typename T>
void HttpComponent_http_request_chunk::accept_generic(T& _visitor) const {
	_visitor.template type_begin<HttpComponent_http_request_chunk>(4);
	_visitor.type_field("request", 0); _visitor.accept(request);
	_visitor.type_field("sub_path", 1); _visitor.accept(sub_path);
	_visitor.type_field("offset", 2); _visitor.accept(offset);
	_visitor.type_field("max_bytes", 3); _visitor.accept(max_bytes);
	_visitor.template type_end<HttpComponent_http_request_chunk>(4);
}


} // namespace vnx
} // namespace addons


namespace vnx {

} // vnx

#endif // INCLUDE_vnx_addons_HttpComponent_http_request_chunk_HXX_
