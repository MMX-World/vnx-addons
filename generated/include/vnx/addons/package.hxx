
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_addons_PACKAGE_HXX_
#define INCLUDE_vnx_addons_PACKAGE_HXX_

#include <vnx/Type.h>

#include <vnx/package.hxx>


namespace vnx {
namespace addons {


class CompressedValue;
class DeflatedValue;

extern const vnx::TypeCode* const vnx_native_type_code_CompressedValue; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_DeflatedValue; ///< \private

} // namespace vnx
} // namespace addons


namespace vnx {

void read(TypeInput& in, ::vnx::addons::CompressedValue& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::DeflatedValue& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::vnx::addons::CompressedValue& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::DeflatedValue& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::vnx::addons::CompressedValue& value); ///< \private
void read(std::istream& in, ::vnx::addons::DeflatedValue& value); ///< \private

void write(std::ostream& out, const ::vnx::addons::CompressedValue& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::DeflatedValue& value); ///< \private

void accept(Visitor& visitor, const ::vnx::addons::CompressedValue& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::DeflatedValue& value); ///< \private

/// \private
template<>
struct type<::vnx::addons::CompressedValue> {
	void read(TypeInput& in, ::vnx::addons::CompressedValue& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::CompressedValue& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::CompressedValue& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::CompressedValue& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::CompressedValue& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::vnx::addons::DeflatedValue> {
	void read(TypeInput& in, ::vnx::addons::DeflatedValue& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::DeflatedValue& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::DeflatedValue& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::DeflatedValue& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::DeflatedValue& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};


} // namespace vnx

#endif // INCLUDE_vnx_addons_PACKAGE_HXX_
